package com.markcdunn.core.services;

import com.markcdunn.core.model.Entity;
import com.markcdunn.core.model.Modification;

import java.util.Collection;

/**
 * The generic data service interface.
 * 
 * This interface provides CRUD operations for a given entity interface at the service layer.
 * 
 * @param <I> The entity interface supported by the service.
 * @param <K> The key of the data type supported by the service.
 */
public interface DataService<I extends Entity, K>
        extends SearchService<I> {

    /**
     * Factory method to create a new instance of the entity without persisting.
     * 
     * @return a new instance.
     * @throws ServiceException
     */
    public I newInstance()
            throws ServiceException;

    /**
     * Retrieves the entity by key.
     * 
     * @param key the key of the entity to retrieve.
     * @return the entity with matching key, or null if no matching entity is found.
     * @throws ServiceException
     */
    public I get(K key)
            throws ServiceException;

    /**
     * Retrieves the entities by keys.
     *
     * @param keys the keys of the entity to retrieve.
     * @return the entities with matching keys, or empty list if no matching entities found.
     * @throws ServiceException
     */
    public Collection<I> getAll(Collection<K> keys)
            throws ServiceException;

    /**
     * Persists the entity, creating a new record.
     *
     * @param entity the entity to create
     * @return the created entity
     * @throws ServiceException
     */
    public I create(I entity)
            throws ServiceException;

    /**
     * Persists the entity, creating a new record without flushing.
     *
     * @param entity the entity to create
     * @return the created entity
     * @throws ServiceException
     */
    public I createNoFlush(I entity)
            throws ServiceException;

    /**
     * Persists the entity, updating the existing record as necessary.
     * 
     * @param entity the entity to update
     * @return the updated entity
     * @throws ServiceException
     */
    public I update(I entity)
            throws ServiceException;
    
    /**
     * Persists the entity, updating the existing record as necessary without flushing.
     *
     * @param entity the entity to update
     * @return the updated entity
     * @throws ServiceException
     */
    public I updateNoFlush(I entity)
            throws ServiceException;

    /**
     * Persists the entities, updating the existing records as necessary.
     *
     * @param entities the entities to update
     * @return the updated entities
     * @throws ServiceException
     */
    public Collection<I> updateAll(Collection<I> entities)
            throws ServiceException;

    /**
     * Persists the entities, updating the existing records as necessary without flushing.
     *
     * @param entities the entities to update
     * @return the updated entities
     * @throws ServiceException
     */
    public Collection<I> updateAllNoFlush(Collection<I> entities)
            throws ServiceException;

    /**
     * Removes the persistent record for the entity.
     * 
     * @param entity the entity to remove
     * @return true if successful, false otherwise.
     * @throws ServiceException
     */
    public boolean delete(I entity)
            throws ServiceException;

    /**
     * Removes the persistent record for the entity without flushing.
     *
     * @param entity the entity to remove
     * @return true if successful, false otherwise.
     * @throws ServiceException
     */
    public boolean deleteNoFlush(I entity)
            throws ServiceException;

    /**
     * Removes the persistent record for the entities.
     *
     * @param entities the entities to remove
     * @return true if successful, false otherwise.
     * @throws ServiceException
     */
    public boolean deleteAll(Collection<I> entities)
            throws ServiceException;

    /**
     * Removes the persistent record for the entities without flushing.
     *
     * @param entities the entities to remove
     * @return true if successful, false otherwise.
     * @throws ServiceException
     */
    public boolean deleteAllNoFlush(Collection<I> entities)
            throws ServiceException;

    /**
     * Updates the entity with an Id.
     * This is called prior to creation in case Ids are to be generated by the application.
     *
     * @param entity the entity to generate the id for
     * @throws ServiceException
     */
    public void generateNewId(I entity)
            throws ServiceException;

    /**
     * Apply the entity modifications passed in.
     * @param modifications List of entity modifications
     * @throws ServiceException
     */
    public Collection<I> applyModifications(Collection<Modification<I>> modifications)
            throws ServiceException;
}
